package handler

import (
	"a21hc3NpZ25tZW50/client"
	"a21hc3NpZ25tZW50/model"
	"bufio"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

var UserLogin = make(map[string]model.User)

// DESC: func Auth is a middleware to check user login id, only user that already login can pass this middleware
func Auth(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		c, err := r.Cookie("user_login_id")
		if err != nil {
			w.WriteHeader(http.StatusUnauthorized)
			json.NewEncoder(w).Encode(model.ErrorResponse{Error: err.Error()})
			return
		}

		if _, ok := UserLogin[c.Value]; !ok || c.Value == "" {
			w.WriteHeader(http.StatusUnauthorized)
			json.NewEncoder(w).Encode(model.ErrorResponse{Error: "user login id not found"})
			return
		}

		ctx := r.Context()
		ctx = context.WithValue(ctx, "userID", c.Value)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// DESC: func AuthAdmin is a middleware to check user login role, only admin can pass this middleware
func AuthAdmin(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		cookie, err := r.Cookie("user_login_role")
		if err != nil {
			http.Error(w, "{\"error\":\"user login role not found\"}", http.StatusUnauthorized)
			return
		}

		if cookie.Value != "admin" {
			http.Error(w, "{\"error\":\"user login role not Admin\"}", http.StatusUnauthorized)
			return
		}

		next.ServeHTTP(w, r)
	})
}

func getUserData(id string) (model.User, bool) {
	file, err := os.OpenFile("data/users.txt", os.O_RDONLY, 0644)
	user := model.User{}
	isCheck := false
	if err != nil {
		panic(err)
	}
	fileScanner := bufio.NewScanner(file)
	for fileScanner.Scan() {
		text := fileScanner.Text()
		splited := strings.Split(text, "_")
		if splited[0] == id {
			user = model.User{ID: splited[0], Name: splited[1], Role: splited[2]}
			isCheck = true
			// role = splited[3]
			break
		}
	}
	return user, isCheck
}

func Login(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		w.WriteHeader(http.StatusMethodNotAllowed)
		errorResponse := model.ErrorResponse{Error: "Method is not allowed!"}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// Parse request body
	var requestBody model.UserLogin
	err := json.NewDecoder(r.Body).Decode(&requestBody)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		errorResponse := model.ErrorResponse{Error: err.Error()}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// Check ID and name
	if requestBody.ID == "" || requestBody.Name == "" {
		w.WriteHeader(http.StatusBadRequest)
		errorResponse := model.ErrorResponse{Error: "ID or name is empty"}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// Check user in file data/users.txt
	// user, ok := UserLogin[requestBody.ID]
	user, ok := getUserData(requestBody.ID)
	fmt.Println(user)
	fmt.Println(!ok)
	if !ok {
		w.WriteHeader(http.StatusBadRequest)
		errorResponse := model.ErrorResponse{Error: "user not found"}
		json.NewEncoder(w).Encode(errorResponse)
		return
	}

	// Set cookie
	http.SetCookie(w, &http.Cookie{Name: "user_login_id", Value: user.ID})
	http.SetCookie(w, &http.Cookie{Name: "user_login_role", Value: user.Role})

	// Save user to UserLogin map
	UserLogin[user.ID] = user

	// Response success
	successResponse := model.SuccessResponse{Username: user.Name, Message: "login success"}
	json.NewEncoder(w).Encode(successResponse)
}

func Register(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		w.WriteHeader(http.StatusMethodNotAllowed)
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"error": "Method is not allowed!"}
		json.NewEncoder(w).Encode(response)
		return
	}

	var newUser model.User
	err := json.NewDecoder(r.Body).Decode(&newUser)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"error": "Invalid request body"}
		json.NewEncoder(w).Encode(response)
		return
	}

	if newUser.ID == "" || newUser.Name == "" || newUser.Role == "" || newUser.StudyCode == "" {
		w.WriteHeader(http.StatusBadRequest)
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"error": "ID, name, study code or role is empty"}
		json.NewEncoder(w).Encode(response)
		return
	}

	if newUser.Role != "admin" && newUser.Role != "user" {
		w.WriteHeader(http.StatusBadRequest)
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"error": "role must be admin or user"}
		json.NewEncoder(w).Encode(response)
		return
	}

	studyList, err := ioutil.ReadFile("data/list-study.txt")
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"error": "Failed to read study list file"}
		json.NewEncoder(w).Encode(response)
		return
	}

	if !strings.Contains(string(studyList), newUser.StudyCode+"_") {
		w.WriteHeader(http.StatusBadRequest)
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"error": "study code not found"}
		json.NewEncoder(w).Encode(response)
		return
	}

	userData, err := ioutil.ReadFile("data/users.txt")
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"error": "Failed to read user data file"}
		json.NewEncoder(w).Encode(response)
		return
	}

	if strings.Contains(string(userData), newUser.ID+"_") {
		w.WriteHeader(http.StatusBadRequest)
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"error": "user id already exist"}
		json.NewEncoder(w).Encode(response)
		return
	}

	file, err := os.OpenFile("data/users.txt", os.O_APPEND|os.O_WRONLY, 0644)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"error": "Failed to open user data file"}
		json.NewEncoder(w).Encode(response)
		return
	}
	defer file.Close()

	_, err = fmt.Fprintf(file, "%s_%s_%s\n", newUser.ID, newUser.Name, newUser.Role)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Header().Set("Content-Type", "application/json")
		response := map[string]string{"error": "Failed to write to user data file"}
		json.NewEncoder(w).Encode(response)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "application/json")
	response := map[string]string{"username": newUser.ID, "message": "register success"}
	json.NewEncoder(w).Encode(response)

}

func Logout(w http.ResponseWriter, r *http.Request) {
	userID := r.Context().Value("userID").(string)

	// Mengecek method request
	if r.Method != "POST" {
		w.WriteHeader(http.StatusMethodNotAllowed)
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"error": "Method is not allowed!"})
		return
	}

	// Mengecek cookie user_login_id
	cookie, err := r.Cookie("user_login_id")
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"error": "user login id not found"})
		return
	}

	// Mengecek apakah userID sama dengan cookie user_login_id
	if userID != cookie.Value {
		w.WriteHeader(http.StatusUnauthorized)
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"error": "user login id not found"})
		return
	}

	// Menghapus cookie user_login_id dan user_login_role
	http.SetCookie(w, &http.Cookie{Name: "user_login_id", Value: "", Expires: time.Now().Add(-time.Hour)})
	http.SetCookie(w, &http.Cookie{Name: "user_login_role", Value: "", Expires: time.Now().Add(-time.Hour)})

	// Menghapus data user dari map UserLogin
	delete(UserLogin, userID)

	// Memberikan response sukses
	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"username": userID, "message": "logout success"})
}

func getListStudy() ([]model.StudyData, error) {
	f, err := os.Open(filepath.Join("data", "list-study.txt"))
	if err != nil {
		return nil, err
	}

	defer f.Close()

	var studyList []model.StudyData

	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		line := scanner.Text()
		split := strings.Split(line, "_")
		studyList = append(studyList, model.StudyData{Code: split[0], Name: split[1]})
	}
	return studyList, nil
}

func GetStudyProgram(w http.ResponseWriter, r *http.Request) {
	// Check if the request method is GET
	if r.Method != http.MethodGet {
		w.WriteHeader(http.StatusMethodNotAllowed)
		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Method is not allowed!"})
		return
	}

	studyList, err := getListStudy()
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Failed to read study list"})
		return
	}
	// Return success response with list of study programs
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(studyList)
}

func AddUser(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		w.WriteHeader(http.StatusMethodNotAllowed)
		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Method is not allowed!"})
		return
	}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Invalid request body"})
		return
	}

	var user model.User
	err = json.Unmarshal(reqBody, &user)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Invalid request body"})
		return
	}

	if user.ID == "" || user.Name == "" || user.StudyCode == "" {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "ID, name, or study code is empty"})
		return
	}

	if !isStudyCodeExist(user.StudyCode) {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "study code not found"})
		return
	}

	if isUserExist(user.ID) {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "user id already exist"})
		return
	}

	file, err := os.OpenFile("data/users.txt", os.O_APPEND|os.O_WRONLY, 0644)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Failed to open file"})
		return
	}

	defer file.Close()

	user.Role = "user"

	data := []string{user.ID, user.Name, user.Role, user.StudyCode}
	_, err = file.WriteString(strings.Join(data, "_") + "\n")
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(model.ErrorResponse{Error: "Failed to write file"})
		return
	}

	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(model.SuccessResponse{Username: user.ID, Message: "add user success"})
}

func isUserExist(id string) bool {
	file, err := os.Open("data/users.txt")
	if err != nil {
		return false
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		parts := strings.Split(line, "_")
		if parts[0] == id {
			return true
		}
	}

	return false
}

func isStudyCodeExist(code string) bool {
	file, err := os.Open("data/list-study.txt")
	if err != nil {
		return false
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		parts := strings.Split(line, "_")
		if parts[0] == code {
			return true
		}
	}
	return false
}

func DeleteUser(w http.ResponseWriter, r *http.Request) {
	// Cek method request
	if r.Method != "DELETE" {
		w.WriteHeader(http.StatusMethodNotAllowed)
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{"error":"Method is not allowed!"}`)
		return
	}

	// Cek cookie login
	_, err := r.Cookie("user_login_id")
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{"error":"user login id not found"}`)
		return
	}

	// Cek role admin
	roleCookie, err := r.Cookie("user_login_role")
	if err != nil || roleCookie.Value != "admin" {
		w.WriteHeader(http.StatusUnauthorized)
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{"error":"user login role not Admin"}`)
		return
	}

	// Ambil ID user dari query parameter
	id := r.URL.Query().Get("id")
	if id == "" {
		w.WriteHeader(http.StatusBadRequest)
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{"error":"user id is empty"}`)
		return
	}

	// Cari dan hapus data user dari file users.txt
	file, err := os.OpenFile("data/users.txt", os.O_RDWR, 0644)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{"error":"%s"}`, err.Error())
		return
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	writer := bufio.NewWriter(file)
	found := false

	for scanner.Scan() {
		line := scanner.Text()
		fields := strings.Split(line, "_")

		if fields[0] != id {
			// tulis kembali data user ke file
			fmt.Fprintln(writer, line)
		} else {
			found = true
		}
	}
	if !found {
		w.WriteHeader(http.StatusBadRequest)
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{"error":"user id is empty"}`)
		return
	}

	// Simpan perubahan file dan kirim response
	writer.Flush()
	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "application/json")
	fmt.Fprintf(w, `{"username":"%s","message":"delete success"}`, id)
}

// DESC: Gunakan variable ini sebagai goroutine di handler GetWeather
var GetWetherByRegionAPI = client.GetWeatherByRegion

func GetWeather(w http.ResponseWriter, r *http.Request) {
	var listRegion = []string{"jakarta", "bandung", "surabaya", "yogyakarta", "medan", "makassar", "manado", "palembang", "semarang", "bali"}

	var resCh = make(chan model.MainWeather, len(listRegion))
	var errCh = make(chan error, len(listRegion))

	// goroutine to get weather data for each region
	for _, region := range listRegion {
		go func(region string) {
			weather, err := GetWetherByRegionAPI(region)
			if err != nil {
				errCh <- err
				return
			}
			resCh <- weather
		}(region)
	}

	var result []model.MainWeather
	var err error
	// get results from channels
	for i := 0; i < len(listRegion); i++ {
		select {
		case weather := <-resCh:
			result = append(result, weather)
		case e := <-errCh:
			err = e
		}
	}

	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	respBody, err := json.Marshal(result)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)

}
